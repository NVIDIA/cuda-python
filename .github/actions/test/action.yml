name: test

description: Run tests in specified project

inputs:
  test-options:
    required: true
    type: string

runs:
  using: composite
  steps:
    - name: Run nvidia-smi to make sure GPU is working
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: nvidia-smi

    # The cache action needs this
    - name: Install zstd
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        apt update
        apt install zstd

    - name: Download bindings build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.CUDA_BINDINGS_ARTIFACT_NAME }}
        path: ${{ env.CUDA_BINDINGS_ARTIFACTS_DIR }}

    - name: Display structure of downloaded bindings artifacts
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        pwd
        ls -lahR $CUDA_BINDINGS_ARTIFACTS_DIR

    - name: Download core build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.CUDA_CORE_ARTIFACT_NAME }}
        path: ${{ env.CUDA_CORE_ARTIFACTS_DIR }}

    - name: Display structure of downloaded core build artifacts
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        pwd
        ls -lahR $CUDA_CORE_ARTIFACTS_DIR

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up CTK cache variable
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        echo "CTK_CACHE_KEY=mini-ctk-${CTK_BUILD_VER}-${HOST_PLATFORM}" >> $GITHUB_ENV
        echo "CTK_CACHE_FILENAME=mini-ctk-${CTK_BUILD_VER}-${HOST_PLATFORM}.tar.gz" >> $GITHUB_ENV

    - name: Download CTK cache
      id: ctk-get-cache
      uses: actions/cache/restore@v4
      continue-on-error: true
      with:
        key: ${{ env.CTK_CACHE_KEY }}
        path: ./${{ env.CTK_CACHE_FILENAME }}
        fail-on-cache-miss: true

    - name: Restore CTK cache
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        ls -l
        CUDA_PATH="$(pwd)/cuda_toolkit"
        tar -xzvf $CTK_CACHE_FILENAME
        ls -l $CUDA_PATH
        if [ ! -d "$CUDA_PATH/include" ]; then
          exit 1
        fi

        echo "CUDA_PATH=$CUDA_PATH" >> $GITHUB_ENV
        echo "PATH=$PATH:$CUDA_PATH/bin" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CUDA_PATH/lib" >> $GITHUB_ENV

    - name: Run test / analysis
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        REPO_DIR=$(pwd)

        cd "${CUDA_BINDINGS_ARTIFACTS_DIR}"
        pip install *.whl

        cd "${CUDA_CORE_ARTIFACTS_DIR}"
        pip install *.whl

        cd "${REPO_DIR}/cuda_bindings"
        pip install -r requirements.txt
        pytest tests/
        #pytest tests/cython

        cd "${REPO_DIR}/cuda_core"
        pytest -rxXs tests/
