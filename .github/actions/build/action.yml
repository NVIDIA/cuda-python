name: build

description: Build specified project

inputs:
  build-type:
    required: true
    type: string
    description: One of ci / release
  target-device:
    required: true
    type: string
  host-platform:
    required: true
    type: string
  upload-enabled:
    required: true
    type: boolean

runs:
  using: composite
  steps:
    - name: Build cuda.core wheel
      uses: pypa/cibuildwheel@v2.22.0
      env:
        CIBW_BUILD: ${{ env.CIBW_BUILD }}
        CIBW_ARCHS_LINUX: "native"
        CIBW_BUILD_VERBOSITY: 1
        # # ensure Python.h & co can be found
        # CIBW_BEFORE_BUILD_WINDOWS: >
        #   python -c "import sysconfig; print(sysconfig.get_path('include'))" >> $env:INCLUDE
      with:
        package-dir: ./cuda_core/
        output-dir: ${{ env.CUDA_CORE_ARTIFACTS_DIR }}

    - name: List the cuda.core artifacts directory
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        if [[ "${{ inputs.host-platform }}" == win* ]]; then
          export CHOWN=chown
        else
          export CHOWN="sudo chown"
        fi
        $CHOWN -R $(whoami) ${{ env.CUDA_CORE_ARTIFACTS_DIR }}
        ls -lahR ${{ env.CUDA_CORE_ARTIFACTS_DIR }}

    - name: Upload cuda.core build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.CUDA_CORE_ARTIFACT_NAME }}
        path: ${{ env.CUDA_CORE_ARTIFACTS_DIR }}/*.whl
        if-no-files-found: error
        overwrite: 'true'

    - name: Build cuda.bindings wheel
      uses: pypa/cibuildwheel@v2.22.0
      env:
        CIBW_BUILD: ${{ env.CIBW_BUILD }}
        CIBW_ARCHS_LINUX: "native"
        CIBW_BUILD_VERBOSITY: 1
        CIBW_ENVIRONMENT_LINUX: >
          CUDA_PATH="$(realpath ./cuda_toolkit)"
          PARALLEL_LEVEL=${{ env.PARALLEL_LEVEL }}
        CIBW_ENVIRONMENT_WINDOWS: >
          CUDA_HOME="$(cygpath -w $(realpath ./cuda_toolkit))"
        #  PARALLEL_LEVEL=${{ env.PARALLEL_LEVEL }}
        # # ensure Python.h & co can be found
        # CIBW_BEFORE_BUILD_WINDOWS: >
        #   python -c "import sysconfig; print(sysconfig.get_path('include'))" >> $env:INCLUDE
      with:
        package-dir: ./cuda_bindings/
        output-dir: ${{ env.CUDA_BINDINGS_ARTIFACTS_DIR }}

    - name: List the cuda.bindings artifacts directory
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        if [[ "${{ inputs.host-platform }}" == win* ]]; then
          export CHOWN=chown
        else
          export CHOWN="sudo chown"
        fi
        $CHOWN -R $(whoami) ${{ env.CUDA_BINDINGS_ARTIFACTS_DIR }}
        ls -lahR ${{ env.CUDA_BINDINGS_ARTIFACTS_DIR }}

    - name: Upload cuda.bindings build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.CUDA_BINDINGS_ARTIFACT_NAME }}
        path: ${{ env.CUDA_BINDINGS_ARTIFACTS_DIR }}/*.whl
        if-no-files-found: error
        overwrite: 'true'
