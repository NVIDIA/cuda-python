# Copyright (c) 2024-2025, NVIDIA CORPORATION & AFFILIATES. ALL RIGHTS RESERVED.
#
# SPDX-License-Identifier: Apache-2.0

name: Fetch mini CTK

description: Fetch (or create) a mini CUDA Toolkit from cache

inputs:
  host-platform:
    required: true
    type: string
  cuda-version:
    required: true
    type: string
  cuda-components:
    description: "A list of the CTK components to install as a comma-separated list. e.g. 'cuda_nvcc,cuda_nvrtc,cuda_cudart'"
    required: false
    type: string
    default: "cuda_nvcc,cuda_cudart,cuda_nvrtc,cuda_profiler_api,cuda_cccl,cuda_sanitizer_api,libnvjitlink"

runs:
  using: composite
  steps:
    - name: Set up CTK cache variable
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        HASH=$(echo -n "${{ inputs.cuda-components }}" | sha256sum | awk '{print $1}')
        echo "CTK_CACHE_KEY=mini-ctk-${{ inputs.cuda-version }}-${{ inputs.host-platform }}-$HASH" >> $GITHUB_ENV
        echo "CTK_CACHE_FILENAME=mini-ctk-${{ inputs.cuda-version }}-${{ inputs.host-platform }}-$HASH.tar.gz" >> $GITHUB_ENV
        echo "CTK_CACHE_COMPONENTS=${{ inputs.cuda-components }}" >> $GITHUB_ENV

    - name: Install dependencies
      uses: ./.github/actions/install_unix_deps
      continue-on-error: false
      with:
        dependencies: "zstd curl xz-utils"
        dependent_exes: "zstd curl xz"

    - name: Download CTK cache
      id: ctk-get-cache
      uses: actions/cache/restore@v4
      continue-on-error: true
      with:
        key: ${{ env.CTK_CACHE_KEY }}
        path: ./${{ env.CTK_CACHE_FILENAME }}
        fail-on-cache-miss: false

    - name: Get CUDA components
      if: ${{ steps.ctk-get-cache.outputs.cache-hit != 'true' }}
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        CUDA_PATH="./cuda_toolkit"
        mkdir $CUDA_PATH

        # The binary archives (redist) are guaranteed to be updated as part of the release posting.
        CTK_BASE_URL="https://developer.download.nvidia.com/compute/cuda/redist/"
        if [[ "${{ inputs.host-platform }}" == linux* ]]; then
          if [[ "${{ inputs.host-platform }}" == "linux-64" ]]; then
            CTK_SUBDIR="linux-x86_64"
          elif [[ "${{ inputs.host-platform }}" == "linux-aarch64" ]]; then
            CTK_SUBDIR="linux-sbsa"
          fi
          function extract() {
            tar -xvf $1 -C $CUDA_PATH --strip-components=1
          }
        elif [[ "${{ inputs.host-platform }}" == "win-64" ]]; then
          CTK_SUBDIR="windows-x86_64"
          function extract() {
            _TEMP_DIR_=$(mktemp -d)
            unzip $1 -d $_TEMP_DIR_
            cp -r $_TEMP_DIR_/*/* $CUDA_PATH
            rm -rf $_TEMP_DIR_
          }
        fi

        function populate_cuda_path() {
          # take the component name as a argument
          function download() {
            curl -kLSs $1 -o $2
          }
          local CTK_COMPONENT=$1
          local CTK_VERSION=$2
          CTK_COMPONENT_REL_PATH="$(curl -s ${CTK_BASE_URL}/redistrib_${CTK_VERSION}.json |
              python -c "import sys, json; print(json.load(sys.stdin)['${CTK_COMPONENT}']['${CTK_SUBDIR}']['relative_path'])")"
          CTK_COMPONENT_URL="${CTK_BASE_URL}/${CTK_COMPONENT_REL_PATH}"
          CTK_COMPONENT_COMPONENT_FILENAME="$(basename $CTK_COMPONENT_REL_PATH)"
          download $CTK_COMPONENT_URL $CTK_COMPONENT_COMPONENT_FILENAME
          extract $CTK_COMPONENT_COMPONENT_FILENAME
          rm $CTK_COMPONENT_COMPONENT_FILENAME
        }

        # Conditionally strip out libnvjitlink for CUDA versions < 12
        if [[ "$(cut -d '.' -f 1 <<< ${{ inputs.cuda-version }})" -lt 12 ]]; then
          CTK_CACHE_COMPONENTS="${CTK_CACHE_COMPONENTS//libnvjitlink/}"
        fi
        # Cleanup stray commas after removing components
        CTK_CACHE_COMPONENTS="${CTK_CACHE_COMPONENTS//,,/,}"
        # Get headers and shared libraries in place
        for item in $(echo $CTK_CACHE_COMPONENTS | tr ',' ' '); do
            ctk_version="${{ inputs.cuda-version }}"
            if [[ "$item" == "cuda_sanitizer_api" ]]; then
              # Always use latest CTK for cuda_sanitizer_api
              # FIXME: Automatically track latest CTK version
              CUDA_MAJOR="$(cut -d '.' -f 1 <<< ${{ inputs.cuda-version }})"
              if [[ "$CUDA_MAJOR" == "12" ]]; then
                # TODO: Automatically track latest CTK minor version
                ctk_version="12.8.0"
              fi
            fi
            populate_cuda_path "$item" "$ctk_version"
        done
        ls -l $CUDA_PATH

        # Prepare the cache
        # Note: try to escape | and > ...
        tar -czvf ${CTK_CACHE_FILENAME} ${CUDA_PATH}

    - name: Upload CTK cache
      if: ${{ always() &&
              steps.ctk-get-cache.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        key: ${{ env.CTK_CACHE_KEY }}
        path: ./${{ env.CTK_CACHE_FILENAME }}

    - name: Restore CTK cache
      if: ${{ steps.ctk-get-cache.outputs.cache-hit == 'true' }}
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        ls -l
        CUDA_PATH="./cuda_toolkit"
        tar -xzvf $CTK_CACHE_FILENAME
        ls -l $CUDA_PATH
        if [ ! -d "$CUDA_PATH/include" ]; then
          exit 1
        fi

    - name: Set output environment variables
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        CUDA_PATH=$(realpath "./cuda_toolkit")
        echo "CUDA_PATH=${CUDA_PATH}" >> $GITHUB_ENV
        echo "CUDA_HOME=${CUDA_PATH}" >> $GITHUB_ENV
        echo "${CUDA_PATH}/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-}:${CUDA_PATH}/lib:${CUDA_PATH}/nvvm/lib64" >> $GITHUB_ENV
