name: Common setup

inputs:
  client-repo:
    required: true
    type: string
  build-type:
    required: true
    type: string
  target-device:
    required: true
    type: string
  host-platform:
    required: true
    type: string
  build-mode:
    required: true
    type: string
  upload-enabled:
    required: true
    type: boolean
  python-version:
    required: true
    type: string
  cuda-version:
    required: true
    type: string

runs:
  using: composite
  steps:
    # WAR: setup-python is not relocatable...
    # see https://github.com/actions/setup-python/issues/871
    - name: Set up Python ${{ inputs.python-version }}
      if: ${{ startsWith(inputs.host-platform, 'linux') }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    # - name: Set up new PowerShell (pwsh)
    #   if: ${{ startsWith(inputs.host-platform, 'win') }}
    #   shell: powershell
    #   env:
    #     # doesn't seem there's an easy way to avoid hard-coding it?
    #     PS_MSI_URL: https://github.com/PowerShell/PowerShell/releases/download/v7.4.6/PowerShell-7.4.6-win-x64.msi
    #   run: |
    #     Invoke-WebRequest -Uri "$env:PS_MSI_URL" -OutFile "ps_installer.msi"
    #     Start-Process msiexec.exe -Wait -Verbose -ArgumentList '/i "ps_installer.msi" /qn REGISTER_MANIFEST=1'
    #     echo "$env:ProgramFiles\\PowerShell\\7" >> $env:GITHUB_PATH

    # - name: Install MSVC
    #   if: ${{ startsWith(inputs.host-platform, 'win') }}
    #   shell: pwsh
    #   run: |
    #     # Download & install
    #     .\\continuous_integration\\scripts\\install-vs.ps1 -msvcVersion 15 -clVersion 14.16

    #     # Verify
    #     # Note: this assumes vs2017, e.g. see _find_vc2017():
    #     # https://github.com/pypa/setuptools/blob/9692cde009af4651819d18a1e839d3b6e3fcd77d/setuptools/_distutils/_msvccompiler.py#L67
    #     $vsPath = & "${env:ProgramFiles(x86)}\\Microsoft Visual Studio\\Installer\\vswhere.exe" `
    #               -latest `
    #               -products * `
    #               -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 `
    #               -property installationPath
    #     $clPath = Join-Path $vsPath "VC\\Tools\\MSVC\\*\\bin\\Hostx64\\x64\\cl.exe"
    #     $clPath = (Get-ChildItem $clPath).FullName
    #     echo "found cl.exe: $clPath"
    #     # # For some reason below just doesn't work in the CI...
    #     # Start-Process -NoNewWindow -RedirectStandardError cl.out -FilePath "$clPath"
    #     # $CL_VERSION_STRING = & type cl.out
    #     # if (($CL_VERSION_STRING -join " ") -match "Version (\\d+\\.\\d+)\\.\\d+") {
    #     #     $CL_VERSION = $matches[1]
    #     #     echo "Detected cl.exe version: $CL_VERSION"
    #     # }

    #     # Delete temporary items created by installers and such
    #     Remove-Item -Recurse "${env:TEMP}\\*"

    - name: Set up MSVC
      if: ${{ startsWith(inputs.host-platform, 'win') }}
      uses: ilammy/msvc-dev-cmd@v1
    #  with:
    #    toolset: 14.16
    #    vsversion: 2017

    - name: Dump environment
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        env

    - name: Get CUDA components
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        CUDA_PATH="./cuda_toolkit"
        mkdir $CUDA_PATH

        # The binary archives (redist) are guaranteed to be updated as part of the release posting.
        CTK_BASE_URL="https://developer.download.nvidia.com/compute/cuda/redist/"
        CTK_JSON_URL="$CTK_BASE_URL/redistrib_${{ inputs.cuda-version }}.json"
        if [[ "${{ inputs.host-platform }}" == linux* ]]; then
          if [[ "${{ inputs.host-platform }}" == "linux-x64" ]]; then
            CTK_SUBDIR="linux-x86_64"
          elif [[ "${{ inputs.host-platform }}" == "linux-aarch64" ]]; then
            CTK_SUBDIR="linux-sbsa"
          fi
          function extract() {
            tar -xvf $1 -C $CUDA_PATH --strip-components=1
          }
        elif [[ "${{ inputs.host-platform }}" == "win-x64" ]]; then
          CTK_SUBDIR="windows-x86_64"
          function extract() {
            _TEMP_DIR_=$(mktemp -d)
            unzip $1 -d $_TEMP_DIR_
            cp -r $_TEMP_DIR_/* $CUDA_PATH
            rm -rf $_TEMP_DIR_
          }
        fi
        function populate_cuda_path() {
          # take the component name as a argument
          function download() {
            curl -kLSs $1 -o $2
          }
          CTK_COMPONENT=$1
          CTK_COMPONENT_REL_PATH="$(curl -s $CTK_JSON_URL |
              python -c "import sys, json; print(json.load(sys.stdin)['${CTK_COMPONENT}']['${CTK_SUBDIR}']['relative_path'])")"
          CTK_COMPONENT_URL="${CTK_BASE_URL}/${CTK_COMPONENT_REL_PATH}"
          CTK_COMPONENT_COMPONENT_FILENAME="$(basename $CTK_COMPONENT_REL_PATH)"
          download $CTK_COMPONENT_URL $CTK_COMPONENT_COMPONENT_FILENAME
          extract $CTK_COMPONENT_COMPONENT_FILENAME
          rm $CTK_COMPONENT_COMPONENT_FILENAME
        }

        # Get headers and shared libraries in place
        populate_cuda_path cuda_nvcc
        populate_cuda_path cuda_cudart
        populate_cuda_path cuda_nvrtc
        populate_cuda_path cuda_profiler_api

        # Note: the headers will be copied into the cibuildwheel manylinux container,
        # so setting the CUDA_PATH env var here is meaningless.

    - name: Set environment variables
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        # TODO: just align host-platform names with TARGET_PLATFORM...
        if [[ "${{ inputs.host-platform }}" == "linux-x64" ]]; then
          TARGET_PLATFORM='linux-64'
        elif [[ "${{ inputs.host-platform }}" == "linux-aarch64" ]]; then
          TARGET_PLATFORM='linux-aarch64'
        elif [[ "${{ inputs.host-platform }}" == "win-x64" ]]; then
          TARGET_PLATFORM='win-64'
        else
          exit 1
        fi

        if [[ "${{ inputs.python-version }}" == "3.12" && "${{ inputs.host-platform }}" == linux* ]]; then
          CIBW_BUILD='cp312-manylinux*'
        elif [[ "${{ inputs.python-version }}" == "3.11" && "${{ inputs.host-platform }}" == linux* ]]; then
          CIBW_BUILD='cp311-manylinux*'
        elif [[ "${{ inputs.python-version }}" == "3.10" && "${{ inputs.host-platform }}" == linux* ]]; then
          CIBW_BUILD='cp310-manylinux*'
        elif [[ "${{ inputs.python-version }}" == "3.9" && "${{ inputs.host-platform }}" == linux* ]]; then
          CIBW_BUILD='cp39-manylinux*'
        elif [[ "${{ inputs.python-version }}" == "3.12" && "${{ inputs.host-platform }}" == win* ]]; then
          CIBW_BUILD='cp312-win_amd64'
        elif [[ "${{ inputs.python-version }}" == "3.11" && "${{ inputs.host-platform }}" == win* ]]; then
          CIBW_BUILD='cp311-win_amd64'
        elif [[ "${{ inputs.python-version }}" == "3.10" && "${{ inputs.host-platform }}" == win* ]]; then
          CIBW_BUILD='cp310-win_amd64'
        elif [[ "${{ inputs.python-version }}" == "3.9" && "${{ inputs.host-platform }}" == win* ]]; then
          CIBW_BUILD='cp39-win_amd64'
        else
          exit 1
        fi

        BUILD_MODE="${{ inputs.build-mode }}"
        if [[ ("${BUILD_MODE}" == "") || ("${BUILD_MODE}" == "release") ]]; then
          # We upload release versions in the default folder.
          PKG_DIR="${TARGET_PLATFORM}"
        else
          PKG_DIR="${BUILD_MODE}/${TARGET_PLATFORM}"
        fi

        if [[ "${{ inputs.host-platform }}" == linux* ]]; then
          REPO_DIR=$(pwd)
        else
          PWD=$(pwd)
          REPO_DIR=$(cygpath -w $PWD)
        fi

        echo "PARALLEL_LEVEL=$(nproc)" >> $GITHUB_ENV
        echo "REPO_DIR=$REPO_DIR" >> $GITHUB_ENV
        echo "PKG_DIR=${PKG_DIR}" >> $GITHUB_ENV
        echo "CUDA_CORE_ARTIFACT_NAME=cuda-core-python${{ inputs.python-version }}-${{ inputs.host-platform }}-${{ inputs.build-type }}-${{ github.sha }}" >> $GITHUB_ENV
        echo "CUDA_CORE_ARTIFACTS_DIR=$(realpath "$REPO_DIR/cuda_core/dist")" >> $GITHUB_ENV
        echo "CUDA_BINDINGS_ARTIFACT_NAME=cuda-bindings-python${{ inputs.python-version }}-cuda${{ inputs.cuda-version }}-${{ inputs.host-platform }}-${{ inputs.build-type }}-${{ github.sha }}" >> $GITHUB_ENV
        echo "CUDA_BINDINGS_ARTIFACTS_DIR=$(realpath "$REPO_DIR/cuda_bindings/dist")" >> $GITHUB_ENV
        echo "UPLOAD_ENABLED=${{ (inputs.upload-enabled  == 'true' && 'ON') || 'OFF' }}" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
        echo "TARGET_PLATFORM=${TARGET_PLATFORM}" >> $GITHUB_ENV
        echo "CIBW_BUILD=${CIBW_BUILD}" >> $GITHUB_ENV
