name: Common setup

inputs:
  client-repo:
    required: true
    type: string
  build-type:
    required: true
    type: string
  target-device:
    required: true
    type: string
  host-platform:
    required: true
    type: string
  build-mode:
    required: true
    type: string
  upload-enabled:
    required: true
    type: boolean
  python-version:
    required: true
    type: string

runs:
  using: composite
  steps:
    - name: Install PowerShell
      if: ${{ startsWith(inputs.host-platform, 'win') }}
      shell: powershell
      env:
        # doesn't seem there's an easy way to avoid hard-coding it?
        PS_MSI_URL: https://github.com/PowerShell/PowerShell/releases/download/v7.4.6/PowerShell-7.4.6-win-x64.msi
      run: |
        Invoke-WebRequest -Uri "$env:PS_MSI_URL" -OutFile "ps_installer.msi"
        Start-Process msiexec.exe -Wait -Verbose -ArgumentList '/i "ps_installer.msi" /qn REGISTER_MANIFEST=1'
        echo "$env:ProgramFiles\\PowerShell\\7" >> $env:GITHUB_PATH

    - name: Set REPO_DIR and Dump environment
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        echo "REPO_DIR=$(pwd)" >> $GITHUB_ENV
        env

    - name: Set environment variables
      shell: bash --noprofile --norc -xeuo pipefail {0}
      run: |
        # TODO: just align host-platform names with TARGET_PLATFORM...
        if [[ "${{ inputs.host-platform }}" == "linux-x64" ]]; then
          TARGET_PLATFORM='linux-64'
        elif [[ "${{ inputs.host-platform }}" == "linux-aarch64" ]]; then
          TARGET_PLATFORM='linux-aarch64'
        elif [[ "${{ inputs.host-platform }}" == "win-x64" ]]; then
          TARGET_PLATFORM='win-64'
        else
          exit 1
        fi

        if [[ "${{ inputs.python-version }}" == "3.12" && "${{ inputs.host-platform }}" == linux* ]]; then
          CIBW_BUILD='cp312-manylinux*'
        elif [[ "${{ inputs.python-version }}" == "3.11" && "${{ inputs.host-platform }}" == linux* ]]; then
          CIBW_BUILD='cp311-manylinux*'
        elif [[ "${{ inputs.python-version }}" == "3.10" && "${{ inputs.host-platform }}" == linux* ]]; then
          CIBW_BUILD='cp310-manylinux*'
        elif [[ "${{ inputs.python-version }}" == "3.9" && "${{ inputs.host-platform }}" == linux* ]]; then
          CIBW_BUILD='cp39-manylinux*'
        elif [[ "${{ inputs.python-version }}" == "3.12" && "${{ inputs.host-platform }}" == win* ]]; then
          CIBW_BUILD='cp312-win_amd64'
        elif [[ "${{ inputs.python-version }}" == "3.11" && "${{ inputs.host-platform }}" == win* ]]; then
          CIBW_BUILD='cp311-win_amd64'
        elif [[ "${{ inputs.python-version }}" == "3.10" && "${{ inputs.host-platform }}" == win* ]]; then
          CIBW_BUILD='cp310-win_amd64'
        elif [[ "${{ inputs.python-version }}" == "3.9" && "${{ inputs.host-platform }}" == win* ]]; then
          CIBW_BUILD='cp39-win_amd64'
        else
          exit 1
        fi

        BUILD_MODE="${{ inputs.build-mode }}"
        if [[ ("${BUILD_MODE}" == "") || ("${BUILD_MODE}" == "release") ]]; then
          # We upload release versions in the default folder.
          PKG_DIR="${TARGET_PLATFORM}"
        else
          PKG_DIR="${BUILD_MODE}/${TARGET_PLATFORM}"
        fi

        echo "CUDA_BINDINGS_ARTIFACTS_DIR=$(realpath "$(pwd)/cuda_bindings/dist")" >> $GITHUB_ENV
        echo "CUDA_CORE_ARTIFACT_NAME=cuda-core-python${{ inputs.python-version }}-${{ inputs.host-platform }}-${{ inputs.build-type }}-${{ github.sha }}" >> $GITHUB_ENV
        echo "CUDA_CORE_ARTIFACTS_DIR=$(realpath "$(pwd)/cuda_core/dist")" >> $GITHUB_ENV
        echo "USE_CUDA=${{ (inputs.target-device == 'cpu' && 'OFF') || 'ON' }}" >> $GITHUB_ENV
        echo "UPLOAD_ENABLED=${{ (inputs.upload-enabled  == 'true' && 'ON') || 'OFF' }}" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
        echo "TARGET_PLATFORM=${TARGET_PLATFORM}" >> $GITHUB_ENV
        echo "PKG_DIR=${PKG_DIR}" >> $GITHUB_ENV
        echo "PYTHON_VERSION=${{ inputs.python-version }}" >> $GITHUB_ENV
        echo "CIBW_BUILD=${CIBW_BUILD}" >> $GITHUB_ENV
