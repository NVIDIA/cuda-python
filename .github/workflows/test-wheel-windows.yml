name: "CI: Test wheels"

on:
  workflow_call:
    inputs:
      host-platform:
        type: string
        required: true
      python-version:
        type: string
        required: true
      build-ctk-ver:
        type: string
        required: true
      cuda-version:
        type: string
        required: true
      local-ctk:
        type: string
        required: true
      runner:
        type: string
        required: true

jobs:
  test:
    # The build stage could fail but we want the CI to keep moving.
    if: ${{ github.repository_owner == 'nvidia' && !cancelled() }}
    runs-on: ${{ (inputs.runner == 'default' && inputs.host-platform == 'win-64' && 'cuda-python-windows-gpu-github') }}
    steps:
      # TODO: need to roll our own script... this is from:
      # https://cloud.google.com/compute/docs/gpus/install-drivers-gpu#install-script
      - name: Update driver
        run: |
          Invoke-WebRequest https://github.com/GoogleCloudPlatform/compute-gpu-installation/raw/main/windows/install_gpu_driver.ps1 -OutFile C:\install_gpu_driver.ps1
          C:\install_gpu_driver.ps1

      - name: Ensure GPU is working
        run: nvidia-smi

      - name: Checkout ${{ github.event.repository.name }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set environment variables
        run: |
          $PYTHON_VERSION_FORMATTED = '${{ inputs.python-version }}' -replace '\.'
          $REPO_DIR = $PWD.Path

          $BUILD_CUDA_MAJOR = '${{ inputs.build-ctk-ver }}' -split '\.' | Select-Object -First 1
          $TEST_CUDA_MAJOR = '${{ inputs.cuda-version }}' -split '\.' | Select-Object -First 1
          if ($BUILD_CUDA_MAJOR -ne $TEST_CUDA_MAJOR) {
            $SKIP_CUDA_BINDINGS_TEST = 1
          } else {
            $SKIP_CUDA_BINDINGS_TEST = 0
          }

          # Make outputs from the previous job as env vars
          $CUDA_CORE_ARTIFACT_BASENAME = "cuda-core-python${PYTHON_VERSION_FORMATTED}-${{ inputs.host-platform }}"
          "PYTHON_VERSION_FORMATTED=${PYTHON_VERSION_FORMATTED}" >> $env:GITHUB_ENV
          "CUDA_CORE_ARTIFACT_BASENAME=${CUDA_CORE_ARTIFACT_BASENAME}" >> $env:GITHUB_ENV
          "CUDA_CORE_ARTIFACT_NAME=${CUDA_CORE_ARTIFACT_BASENAME}-${{ github.sha }}" >> $env:GITHUB_ENV
          "CUDA_CORE_ARTIFACTS_DIR=$((Resolve-Path "$REPO_DIR\cuda_core\dist").Path)" >> $env:GITHUB_ENV
          $CUDA_BINDINGS_ARTIFACT_BASENAME = "cuda-bindings-python${PYTHON_VERSION_FORMATTED}-cuda${{ inputs.build-ctk-ver }}-${{ inputs.host-platform }}"
          "CUDA_BINDINGS_ARTIFACT_BASENAME=${CUDA_BINDINGS_ARTIFACT_BASENAME}" >> $env:GITHUB_ENV
          "CUDA_BINDINGS_ARTIFACT_NAME=${CUDA_BINDINGS_ARTIFACT_BASENAME}-${{ github.sha }}" >> $env:GITHUB_ENV
          "CUDA_BINDINGS_ARTIFACTS_DIR=$((Resolve-Path "$REPO_DIR\cuda_bindings\dist").Path)" >> $env:GITHUB_ENV
          "SKIP_CUDA_BINDINGS_TEST=${SKIP_CUDA_BINDINGS_TEST}" >> $env:GITHUB_ENV

      - name: Download cuda-python build artifacts
        if: ${{ env.SKIP_CUDA_BINDINGS_TEST == '0'}}
        uses: actions/download-artifact@v4
        with:
          name: cuda-python-wheel
          path: .

      - name: Download cuda.bindings build artifacts
        if: ${{ env.SKIP_CUDA_BINDINGS_TEST == '0'}}
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CUDA_BINDINGS_ARTIFACT_NAME }}
          path: ${{ env.CUDA_BINDINGS_ARTIFACTS_DIR }}

      - name: Download cuda-python & cuda.bindings build artifacts from the prior branch
        if: ${{ env.SKIP_CUDA_BINDINGS_TEST == '1'}}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $OLD_BRANCH = Get-Content .github/BACKPORT_BRANCH
          $OLD_BASENAME = "cuda-bindings-python${env:PYTHON_VERSION_FORMATTED}-cuda*-${{ inputs.host-platform }}*"
          $LATEST_PRIOR_RUN_ID = gh run list -b $OLD_BRANCH -L 1 -w "CI: Build and test" -s completed -R NVIDIA/cuda-python --json databaseId | ConvertFrom-Json | Select-Object -ExpandProperty databaseId
          if ([string]::IsNullOrEmpty($LATEST_PRIOR_RUN_ID)) {
            Write-Host "LATEST_PRIOR_RUN_ID not found!"
            exit 1
          }
      
          gh run download $LATEST_PRIOR_RUN_ID -p $OLD_BASENAME -R NVIDIA/cuda-python
          Get-ChildItem -Path $OLD_BASENAME
          New-Item -Path "${{ env.CUDA_BINDINGS_ARTIFACTS_DIR }}" -ItemType Directory -Force
          Move-Item -Path "$OLD_BASENAME/*.whl" -Destination "${{ env.CUDA_BINDINGS_ARTIFACTS_DIR }}"
          Remove-Item -Path $OLD_BASENAME -Force
      
          gh run download $LATEST_PRIOR_RUN_ID -p cuda-python-wheel -R NVIDIA/cuda-python
          Get-ChildItem -Path cuda-python-wheel
          Move-Item -Path "cuda-python-wheel/*.whl" -Destination .
          Remove-Item -Path cuda-python-wheel -Force

      - name: Display structure of downloaded cuda-python artifacts
        run: |
          pwd
          ls -lahR .

      - name: Display structure of downloaded cuda.bindings artifacts
        run: |
          pwd
          ls -lahR $CUDA_BINDINGS_ARTIFACTS_DIR

      - name: Download cuda.core build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CUDA_CORE_ARTIFACT_NAME }}
          path: ${{ env.CUDA_CORE_ARTIFACTS_DIR }}

      - name: Display structure of downloaded cuda.core build artifacts
        run: |
          pwd
          ls -lahR $CUDA_CORE_ARTIFACTS_DIR

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
        env:
          # we use self-hosted runners on which setup-python behaves weirdly...
          AGENT_TOOLSDIRECTORY: "/opt/hostedtoolcache"

      - name: Set up mini CTK
        if: ${{ inputs.local-ctk == '1' }}
        uses: ./.github/actions/fetch_ctk
        continue-on-error: false
        with:
          host-platform: ${{ inputs.host-platform }}
          cuda-version: ${{ inputs.cuda-version }}

      - name: Run cuda.bindings tests
        if: ${{ env.SKIP_CUDA_BINDINGS_TEST == '0' }}
        run: |
          pushd "${CUDA_BINDINGS_ARTIFACTS_DIR}"
          if [[ "${{ inputs.local-ctk }}" == 1 ]]; then
            ls $CUDA_PATH
            pip install *.whl
          else
            pip install $(ls *.whl)[all]
          fi
          popd

          pushd ./cuda_bindings
          pip install -r requirements.txt
          pytest -rxXs tests/

          # It is a bit convoluted to run the Cython tests against CTK wheels,
          # so let's just skip them.
          if [[ "${{ inputs.local-ctk }}" == 1 ]]; then
            if [[ "${{ inputs.host-platform }}" == linux* ]]; then
              bash tests/cython/build_tests.sh
            elif [[ "${{ inputs.host-platform }}" == win* ]]; then
              # TODO: enable this once win-64 runners are up 
              exit 1
            fi  
            pytest -rxXs tests/cython
            popd
          fi

      - name: Run cuda.core tests
        run: |
          # If build/test majors match: cuda.bindings is installed in the previous step.
          # If mismatch: cuda.bindings is installed from the backport branch.
          if [[ "${SKIP_CUDA_BINDINGS_TEST}" == 1 ]]; then
            pushd "${CUDA_BINDINGS_ARTIFACTS_DIR}"
            if [[ "${{ inputs.local-ctk }}" == 1 ]]; then
              pip install *.whl
            else
              pip install $(ls *.whl)[all]
            fi
            popd
          fi
          TEST_CUDA_MAJOR="$(cut -d '.' -f 1 <<< ${{ inputs.cuda-version }})"
          pushd "${CUDA_CORE_ARTIFACTS_DIR}"
          pip install $(ls *.whl)["cu${TEST_CUDA_MAJOR}"]
          popd

          pushd ./cuda_core
          pip install -r "tests/requirements-cu${TEST_CUDA_MAJOR}.txt"
          pytest -rxXs tests/
          popd

      - name: Ensure cuda-python installable
        run: |
          if [[ "${{ inputs.local-ctk }}" == 1 ]]; then
            pip install cuda_python*.whl
          else
            pip install $(ls cuda_python*.whl)[all]
          fi
