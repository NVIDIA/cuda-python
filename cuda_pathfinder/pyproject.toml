# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

[project]
name = "cuda-pathfinder"
description = "Pathfinder for CUDA components"
authors = [{ name = "NVIDIA Corporation", email = "cuda-python-conduct@nvidia.com" }]
license = "Apache-2.0"
requires-python = ">=3.9"
dynamic = ["version", "readme"]
dependencies = []

[dependency-groups]
# Internal organization of test dependencies.
# Note that pixi does not currently support PEP 508 environment markers,
# therefore we are forced to break out subgroups by markers.
test = ["pytest>=6.2.4"]
cu12-common = [
    "cuda-toolkit[nvcc,cublas,nvrtc,cudart,cufft,curand,cusolver,cusparse,npp,nvfatbin,nvjitlink,nvjpeg,cccl]==12.*",
    "nvidia-cudss-cu12",
    "nvidia-libmathdx-cu12",
]
cu12-linux = [
    "cuda-toolkit[cufile]==12.*; sys_platform != 'win32'",
    "nvidia-cufftmp-cu12; sys_platform != 'win32'",
    "nvidia-nccl-cu12; sys_platform != 'win32'",
    "nvidia-nvshmem-cu12; sys_platform != 'win32'",
    "nvidia-cublasmp-cu12; sys_platform != 'win32'",
]
cu13-common = [
    # Cannot use "cuda-toolkit[...]==13.* here, it confuses pixi (observed with pixi 0.56.0)
    "nvidia-cublas",
    "nvidia-cuda-cccl",
    "nvidia-cuda-crt",
    "nvidia-cuda-nvcc",
    "nvidia-cuda-nvrtc",
    "nvidia-cuda-runtime",
    "nvidia-cufft",
    "nvidia-curand",
    "nvidia-cusolver",
    "nvidia-cusparse",
    "nvidia-npp",
    "nvidia-nvfatbin",
    "nvidia-nvjitlink",
    "nvidia-nvjpeg",
    "nvidia-nvvm",
    "nvidia-cudss-cu13",
]
cu13-linux = [
    "cuda-toolkit[cufile]==13.*; sys_platform != 'win32'",
    "nvidia-cublasmp-cu13; sys_platform != 'win32'",
    "nvidia-nccl-cu13; sys_platform != 'win32'",
    "nvidia-nvshmem-cu13; sys_platform != 'win32'",
]
host-linux-aarch64 = [
    "nvpl-fft; platform_system == 'Linux' and platform_machine == 'aarch64'",
]

# User-facing dependencies, e.g. pip install --group test-cu13
test-cu12 = [
    { include-group = "test" },
    { include-group = "cu12-common" },
    { include-group = "cu12-linux" },
    { include-group = "host-linux-aarch64" },
]
test-cu13 = [
    { include-group = "test" },
    { include-group = "cu13-common" },
    { include-group = "cu13-linux" },
    { include-group = "host-linux-aarch64" },
]

[project.urls]
Repository = "https://github.com/NVIDIA/cuda-python"
Documentation = "https://nvidia.github.io/cuda-python/"

[tool.setuptools]
packages = { find = { include = ["cuda*"] } }

[tool.setuptools.dynamic]
version = { attr = "cuda.pathfinder._version.__version__" }
readme = { file = ["DESCRIPTION.rst"], content-type = "text/x-rst" }

[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
line-length = 120
preview = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "E",     # pycodestyle Error
    "F",     # Pyflakes
    "W",     # pycodestyle Warning
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "SIM",   # flake8-simplify
    "I",     # isort
    "ARG",   # flake8-unused-arguments
    "Q",     # flake8-quotes
    "N",     # pep8-naming
    "C4",    # flake8-comprehensions
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "RUF",   # Ruff-specific rules
    "PT",    # flake8-pytest-style
    "DTZ",   # flake8-datetimez
    "S",
]
extend-select = ["B9"]

ignore = [
  "S101",   # asserts
  "S311",   # allow use of the random.* even though many are not cryptographically secure
  "S404",   # allow importing the subprocess module
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101"]

[tool.mypy]
# Basic settings
python_version = "3.9"
explicit_package_bases = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

# Start strict, but allow some flexibility
check_untyped_defs = true
disallow_any_generics = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

# Allow some common patterns to keep it simple
allow_redefinition = true
implicit_reexport = true

# Ignore missing imports for now (you can tighten this later)
ignore_missing_imports = true

# Only check your package
[[tool.mypy.overrides]]
module = "cuda.pathfinder.*"
disallow_untyped_defs = true

# Be more lenient with test files
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
ignore_errors = true

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64", "linux-aarch64", "win-64"]

[tool.pixi.pypi-dependencies]
cuda-pathfinder = { path = ".", editable = true }

[tool.pixi.environments]
cu12-linux-64 = { features = ["test", "cu12-common", "cu12-linux"], solve-group = "cu12-linux-64" }
cu13-linux-64 = { features = ["test", "cu13-common", "cu13-linux"], solve-group = "cu13-linux-64" }
cu12-linux-aarch64 = { features = ["test", "cu12-common", "cu12-linux", "host-linux-aarch64"], solve-group = "cu12-linux-aarch64" }
cu13-linux-aarch64 = { features = ["test", "cu13-common", "cu13-linux", "host-linux-aarch64"], solve-group = "cu13-linux-aarch64" }
cu12-win-64 = { features = ["test", "cu12-common"], solve-group = "cu12-win-64" }
cu13-win-64 = { features = ["test", "cu13-common"], solve-group = "cu13-win-64" }

[tool.pixi.feature.cu12-linux]
platforms = ["linux-64", "linux-aarch64"]

[tool.pixi.feature.cu13-linux]
platforms = ["linux-64", "linux-aarch64"]

[tool.pixi.feature.host-linux-aarch64]
platforms = ["linux-aarch64"]

[tool.pixi.feature.test.tasks]
test = { cmd = ["pytest", "$PIXI_PROJECT_ROOT/tests"] }

[tool.pixi.target.linux.activation.env]
CUDA_HOME = "$CONDA_PREFIX/targets/x86_64-linux"
