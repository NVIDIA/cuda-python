#!/usr/bin/env bash

# Copyright (c) 2025, NVIDIA CORPORATION & AFFILIATES. ALL RIGHTS RESERVED.
#
# SPDX-License-Identifier: Apache-2.0

# A utility script to install the correct packages and run the tests.

set -euo pipefail

# Check if the script was called with exactly 1 argument
if [[ ${#} -ne 1 && ( "${1}" == "bindings" || "${1}" == "core" ) ]]; then
  echo "Error: This script requires exactly 1 argument (what is tested). You provided ${#}"
  echo "Usage: ${0} test_module[bindings or core]"
  exit 1
fi

test_module=${1}

if [[ "${test_module}" == "bindings" ]]; then
  pushd "${CUDA_BINDINGS_ARTIFACTS_DIR}"
  echo "Installing bindings wheel"
  pwd
  ls
  if [[ "${LOCAL_CTK}" == 1 ]]; then
    ls "${CUDA_PATH}"
    pip install $(ls *.whl)[test]
  else
    pip install $(ls *.whl)[all,test]
  fi
  popd
  pushd ./cuda_bindings
  echo "Running bindinds tests"
  pwd
  ${SANITIZER_CMD} pytest -rxXs -v tests/
  if [[ "${SKIP_CYTHON_TEST}" == 0 ]]; then
    ${SANITIZER_CMD} pytest -rxXs -v tests/cython
  fi
  popd
elif [[ "${test_module}" == "core" ]]; then
  # If build/test majors match: cuda.bindings is installed in the previous step.
  # If mismatch: cuda.bindings is installed from the backport branch.
  if [[ "${SKIP_CUDA_BINDINGS_TEST}" == 1 ]]; then
    pushd "${CUDA_BINDINGS_ARTIFACTS_DIR}"
    echo "Installing bindings wheel"
    pwd
    ls
    if [[ "${LOCAL_CTK}" == 1 ]]; then
      pip install *.whl
    else
      pip install $(ls *.whl)[all]
    fi
    popd
  fi
  TEST_CUDA_MAJOR="$(cut -d '.' -f 1 <<< ${CUDA_VER})"
  pushd "${CUDA_CORE_ARTIFACTS_DIR}"
  echo "Installing core wheel"
  pwd
  ls
  pip install $(ls *.whl)["cu${TEST_CUDA_MAJOR}","test-cu${TEST_CUDA_MAJOR}"]
  popd
  pushd ./cuda_core
  echo "Running core tests"
  pwd
  ${SANITIZER_CMD} pytest -rxXs -v tests/
  # Currently our CI always installs the latest bindings (from either major version).
  # This is not compatible with the test requirements.
  if [[ "${SKIP_CYTHON_TEST}" == 0 ]]; then
    ${SANITIZER_CMD} pytest -rxXs -v tests/cython
  fi
  popd
fi