#!/usr/bin/env bash

# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# SPDX-License-Identifier: Apache-2.0

# A utility script to install the correct packages and run the tests.

set -euo pipefail

# Check if the script was called with exactly 1 argument
if [[ ${#} -ne 1 ]]; then
  echo "Error: This script requires exactly 1 argument. You provided ${#}"
  exit 1
fi
if [[ "${1}" != "bindings" && "${1}" != "core" && "${1}" != "pathfinder" ]]; then
  echo "Error: Invalid test module '${1}'. Must be 'bindings', 'core', or 'pathfinder'"
  exit 1
fi

test_module=${1}

# Unconditionally install pathfinder wheel
# (it is a direct dependency of bindings, and a transitive dependency of core)
pushd ./cuda_pathfinder
echo "Installing pathfinder wheel"
pip install $(ls *.whl)[test]
popd

if [[ "${test_module}" == "pathfinder" ]]; then
  pushd ./cuda_pathfinder
  echo "Running pathfinder tests with " \
      "LD:${CUDA_PATHFINDER_TEST_LOAD_NVIDIA_DYNAMIC_LIB_STRICTNESS} " \
      "FH:${CUDA_PATHFINDER_TEST_FIND_NVIDIA_HEADERS_STRICTNESS}"
  pytest -ra --log-cli-level=INFO -v tests/
  popd
elif [[ "${test_module}" == "bindings" ]]; then
  pushd "${CUDA_BINDINGS_ARTIFACTS_DIR}"
  echo "Installing bindings wheel"
  if [[ "${LOCAL_CTK}" == 1 ]]; then
    pip install $(ls *.whl)[test]
  else
    pip install $(ls *.whl)[all,test]
  fi
  popd
  pushd ./cuda_bindings
  echo "Running bindings tests"
  ${SANITIZER_CMD} pytest -rxXs -v tests/
  if [[ "${SKIP_CYTHON_TEST}" == 0 ]]; then
    ${SANITIZER_CMD} pytest -rxXs -v tests/cython
  fi
  popd
elif [[ "${test_module}" == "core" ]]; then
  # If build/test majors match: cuda.bindings is installed in the previous step.
  # If mismatch: cuda.bindings is installed from the backport branch.
  if [[ "${SKIP_CUDA_BINDINGS_TEST}" == 1 ]]; then
    pushd "${CUDA_BINDINGS_ARTIFACTS_DIR}"
    echo "Installing bindings wheel"
    if [[ "${LOCAL_CTK}" == 1 ]]; then
      pip install *.whl
    else
      pip install $(ls *.whl)[all]
    fi
    popd
  fi
  TEST_CUDA_MAJOR="$(cut -d '.' -f 1 <<< ${CUDA_VER})"
  pushd "${CUDA_CORE_ARTIFACTS_DIR}"
  echo "Installing core wheel"

  FREE_THREADING=""
  if python -c 'import sys; assert not sys._is_gil_enabled()' 2> /dev/null; then
    FREE_THREADING+="-ft"
  fi

  if [[ "${LOCAL_CTK}" == 1 ]]; then
    # We already installed cuda-bindings, and all CTK components exist locally,
    # so just install the test dependencies.
    pip install $(ls *.whl)["test-cu${TEST_CUDA_MAJOR}${FREE_THREADING}"]
  else
    pip install $(ls *.whl)["cu${TEST_CUDA_MAJOR}","test-cu${TEST_CUDA_MAJOR}${FREE_THREADING}"]
  fi
  popd
  pushd ./cuda_core
  echo "Running core tests"
  ${SANITIZER_CMD} pytest -rxXs -v tests/
  # Currently our CI always installs the latest bindings (from either major version).
  # This is not compatible with the test requirements.
  if [[ "${SKIP_CYTHON_TEST}" == 0 ]]; then
    ${SANITIZER_CMD} pytest -rxXs -v tests/cython
  fi
  popd
fi
