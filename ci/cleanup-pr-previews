#!/usr/bin/env bash

# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# SPDX-License-Identifier: Apache-2.0

# A utility script to clean up PR preview documentation folders for closed/merged PRs.
# This script checks all pr-XXXXX folders in the gh-pages branch docs/pr-preview/ directory,
# verifies if the corresponding PR XXXXX is still open, and removes preview folders
# for PRs that have been closed or merged.

set -euo pipefail

# Configuration
REPOSITORY="${1:-NVIDIA/cuda-python}"
DRY_RUN="${2:-false}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Usage information
usage() {
    cat << EOF
Usage: $0 [repository] [dry-run]
    repository: GitHub repository (default: NVIDIA/cuda-python)
    dry-run: Set to 'true' to preview what would be deleted without actually deleting (default: false)

Examples:
    $0                                    # Clean up NVIDIA/cuda-python with actual deletions
    $0 NVIDIA/cuda-python true            # Preview what would be cleaned up
    $0 myorg/my-repo false                # Clean up a different repository

Requirements:
    - GH_TOKEN environment variable must be set
    - 'gh' (GitHub CLI) must be installed and authenticated
    - 'jq' must be installed for JSON parsing
    - 'git' must be available
EOF
    exit 1
}

# Check for help flag
if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    usage
fi

# Validate required tools and environment
echo -e "${YELLOW}[INFO]${NC} Checking prerequisites..."

if [[ -z "${GH_TOKEN:-}" ]]; then
    echo -e "${RED}[ERROR]${NC} GH_TOKEN environment variable is required" >&2
    exit 1
fi

if ! command -v jq >/dev/null 2>&1; then
    echo -e "${RED}[ERROR]${NC} jq is required but not installed" >&2
    exit 1
fi

if ! command -v gh >/dev/null 2>&1; then
    echo -e "${RED}[ERROR]${NC} GitHub CLI (gh) is required but not installed" >&2
    exit 1
fi

if ! command -v git >/dev/null 2>&1; then
    echo -e "${RED}[ERROR]${NC} git is required but not installed" >&2
    exit 1
fi

echo -e "${GREEN}[INFO]${NC} All prerequisites satisfied"

# Fetch PR preview folders from gh-pages branch
echo -e "${YELLOW}[INFO]${NC} Fetching PR preview folders from gh-pages branch..."

# Get the list of pr-XXXXX folders from gh-pages branch
PR_FOLDERS=$(gh api repos/"${REPOSITORY}"/contents/docs/pr-preview \
    --header "Accept: application/vnd.github+json" \
    --jq '.[] | select(.type == "dir" and (.name | test("^pr-[0-9]+$"))) | .name' \
    --field ref=gh-pages 2>/dev/null || true)

if [[ -z "$PR_FOLDERS" ]]; then
    echo -e "${YELLOW}[INFO]${NC} No PR preview folders found in gh-pages branch"
    exit 0
fi

echo -e "${GREEN}[INFO]${NC} Found $(echo "$PR_FOLDERS" | wc -l) PR preview folders"

# Check each PR folder
FOLDERS_TO_REMOVE=()
TOTAL_FOLDERS=0
OPEN_PRS=0

while IFS= read -r folder; do
    if [[ -z "$folder" ]]; then
        continue
    fi
    
    TOTAL_FOLDERS=$((TOTAL_FOLDERS + 1))
    
    # Extract PR number from folder name (pr-XXXXX -> XXXXX)
    PR_NUMBER=$(echo "$folder" | sed 's/^pr-//')
    
    echo -e "${YELLOW}[CHECK]${NC} Checking PR #${PR_NUMBER}..."
    
    # Check PR status using GitHub API
    PR_STATUS=$(gh api repos/"${REPOSITORY}"/pulls/"${PR_NUMBER}" \
        --header "Accept: application/vnd.github+json" \
        --jq '.state' 2>/dev/null || echo "not_found")
    
    case "$PR_STATUS" in
        "open")
            echo -e "${GREEN}[KEEP]${NC} PR #${PR_NUMBER} is still open"
            OPEN_PRS=$((OPEN_PRS + 1))
            ;;
        "closed")
            echo -e "${RED}[REMOVE]${NC} PR #${PR_NUMBER} is closed"
            FOLDERS_TO_REMOVE+=("$folder")
            ;;
        "not_found")
            echo -e "${RED}[REMOVE]${NC} PR #${PR_NUMBER} not found (may have been deleted)"
            FOLDERS_TO_REMOVE+=("$folder")
            ;;
        *)
            echo -e "${YELLOW}[UNKNOWN]${NC} PR #${PR_NUMBER} has unexpected status: ${PR_STATUS}"
            ;;
    esac
done <<< "$PR_FOLDERS"

# Summary
echo ""
echo -e "${YELLOW}[SUMMARY]${NC}"
echo "Total PR preview folders: ${TOTAL_FOLDERS}"
echo "Open PRs: ${OPEN_PRS}"
echo "Folders to remove: ${#FOLDERS_TO_REMOVE[@]}"

if [[ ${#FOLDERS_TO_REMOVE[@]} -eq 0 ]]; then
    echo -e "${GREEN}[INFO]${NC} No cleanup needed - all preview folders correspond to open PRs"
    exit 0
fi

# List folders to be removed
echo ""
echo -e "${YELLOW}[FOLDERS TO REMOVE]${NC}"
for folder in "${FOLDERS_TO_REMOVE[@]}"; do
    pr_num=$(echo "$folder" | sed 's/^pr-//')
    echo "  - $folder (PR #${pr_num})"
done

# Perform cleanup or show what would be done
echo ""
if [[ "$DRY_RUN" == "true" ]]; then
    echo -e "${YELLOW}[DRY RUN]${NC} Would remove ${#FOLDERS_TO_REMOVE[@]} folders (use dry-run=false to actually remove)"
else
    echo -e "${RED}[CLEANUP]${NC} Proceeding to remove ${#FOLDERS_TO_REMOVE[@]} folders..."
    
    # Clone gh-pages branch to a temporary directory
    TEMP_DIR=$(mktemp -d)
    trap 'rm -rf "$TEMP_DIR"' EXIT
    
    echo -e "${YELLOW}[INFO]${NC} Cloning gh-pages branch to temporary directory..."
    git clone --depth 1 --branch gh-pages "https://github.com/${REPOSITORY}.git" "$TEMP_DIR" >/dev/null 2>&1
    
    cd "$TEMP_DIR"
    
    # Configure git for the cleanup commit
    git config user.name "cuda-python-bot"
    git config user.email "cuda-python-bot@users.noreply.github.com"
    
    # Remove each folder
    REMOVED_COUNT=0
    for folder in "${FOLDERS_TO_REMOVE[@]}"; do
        pr_num=$(echo "$folder" | sed 's/^pr-//')
        folder_path="docs/pr-preview/$folder"
        
        if [[ -d "$folder_path" ]]; then
            echo -e "${YELLOW}[REMOVE]${NC} Removing $folder_path"
            rm -rf "$folder_path"
            git add "$folder_path"
            REMOVED_COUNT=$((REMOVED_COUNT + 1))
        else
            echo -e "${YELLOW}[SKIP]${NC} Folder $folder_path not found locally"
        fi
    done
    
    if [[ $REMOVED_COUNT -gt 0 ]]; then
        # Commit and push changes
        commit_message="Clean up PR preview folders for ${REMOVED_COUNT} closed/merged PRs

Removed preview folders for the following PRs:
$(printf '%s\n' "${FOLDERS_TO_REMOVE[@]}" | sed 's/^pr-/- PR #/' | head -20)
$(if [[ ${#FOLDERS_TO_REMOVE[@]} -gt 20 ]]; then echo "... and $((${#FOLDERS_TO_REMOVE[@]} - 20)) more"; fi)"
        
        echo -e "${YELLOW}[INFO]${NC} Committing changes..."
        git commit -m "$commit_message"
        
        echo -e "${YELLOW}[INFO]${NC} Pushing to gh-pages branch..."
        git push origin gh-pages
        
        echo -e "${GREEN}[SUCCESS]${NC} Cleanup completed! Removed ${REMOVED_COUNT} PR preview folders"
    else
        echo -e "${YELLOW}[INFO]${NC} No folders were actually removed (they may have been cleaned up already)"
    fi
fi